implementation unmanaged;

define behavior for ZRSLT_I_TRAVEL_U alias travel
implementation in class zrslt_bp_i_travel_u
//late numbering
//lock master
//etag master <field_name>
{

  field ( read only ) TravelID;
  field ( mandatory ) AgencyID, CustomerID, BeginDate, EndDate;

  create;
  update;
  delete;

  action set_status_booked result [1] $self;

  association _Booking { create; }

  mapping for /dmo/travel
  {
    AgencyID = agency_id;
    BeginDate = begin_date;
    BookingFee = booking_fee;
    CurrencyCode = currency_code;
    CustomerID = customer_id;
    EndDate = end_date;
    LastChangedAt = lastchangedat;
    Memo = description;
    Status = status;
    TotalPrice = total_price;
    TravelID = travel_id;
  }

}

define behavior for ZRSLT_I_BOOKING_U alias booking
implementation in class zrslt_bp_i_booking_u
//late numbering
//lock dependent by <association>
//etag master <field_name>
{

  field ( read only ) TravelID, BookingID;
  field ( mandatory ) BookingDate, CustomerID, AirlineID, ConnectionID, FlightDate;

  update;
  delete;

  association _BookSupplement { create; }
  association _Travel;

  mapping for /dmo/booking
  {
    AirlineID = carrier_id;
    BookingDate = booking_date;
    BookingID = booking_id;
    ConnectionID = connection_id;
    CurrencyCode = currency_code;
    CustomerID = customer_id;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    TravelID = travel_id;
  }

}

define behavior for ZRSLT_I_BOOKINGSUPPLEMENT_U alias bookingsupplement
implementation in class zrslt_bp_i_booksupplement_u
//late numbering
//lock dependent by <association>
//etag master <field_name>
{

  field ( read only ) TravelID, BookingID, BookingSupplementID;
  field ( mandatory ) SupplementID, Price;

  update;
  delete;

  association _Travel;

  mapping for /dmo/book_suppl
  {
    BookingID = booking_id;
    BookingSupplementID = booking_supplement_id;
    CurrencyCode = currency_code;
    Price = price;
    SupplementID = supplement_id;
    TravelID = travel_id;
  }

}